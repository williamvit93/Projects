/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import model.Funcionario;
import model.PessoaFisica;
import model.PessoaJuridica;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Will
 */
public class BuscarCadastro extends javax.swing.JInternalFrame {

    /**
     * Creates new form BuscarCadastro
     */
    private String codPf;
    private String codPj;
    private String codFunc;

    public String getCodFunc() {
        return codFunc;
    }

    public void setCodFunc(String codFunc) {
        this.codFunc = codFunc;
    }
    private String campoSelecionado;

    public String getCampoSelecionado() {
        return campoSelecionado;
    }

    public void setCampoSelecionado(String campoSelecionado) {
        this.campoSelecionado = campoSelecionado;
    }

    public String getCodPj() {
        return codPj;
    }

    public void setCodPj(String codPj) {
        this.codPj = codPj;
    }

    public String getCodPf() {
        return codPf;
    }

    public BuscarCadastro() {
        initComponents();
        Login tela = new Login();

        System.out.println(tela.userIn);


        setLocation(100, 20);
        //     
        
    }

    public JButton getAlterarFun() {
        return alterarFun;
    }

    public JButton getAlterarPf() {
        return alterarPf;
    }

    public JButton getAlterarPj() {
        return alterarPj;
    }

    public JButton getbPesquisarPF() {
        return bPesquisarPF;
    }

    public JButton getbPesquisarPJ() {
        return bPesquisarPJ;
    }

    public JPanel getCadFunc() {
        return cadFunc;
    }

    public JComboBox getCbAlterarFun() {
        return cbAlterarFun;
    }

    public JComboBox getCbAlterarPf() {
        return cbAlterarPf;
    }

    public JComboBox getCbAlterarPj() {
        return cbAlterarPj;
    }

    public JCheckBox getCbPotencialPf() {
        return cbPotencialPf;
    }

    public JCheckBox getCbPotencialPj() {
        return cbPotencialPj;
    }

    public JButton getExcluirFunc() {
        return excluirFunc;
    }

    public JButton getExcluirPf() {
        return excluirPf;
    }

    public JButton getExcluirPj() {
        return excluirPj;
    }

    public JScrollPane getjScrollPane2() {
        return jScrollPane2;
    }

    public JScrollPane getjScrollPane6() {
        return jScrollPane6;
    }

    public JScrollPane getjScrollPane7() {
        return jScrollPane7;
    }

    public JTable getMostraFunc() {
        return mostraFunc;
    }

    public JTable getMostraPF() {
        return mostraPF;
    }

    public JTable getMostraPJ() {
        return mostraPJ;
    }

    public JTabbedPane getPainelCad() {
        return painelCad;
    }

    public JButton getPesquisarFunc() {
        return pesquisarFunc;
    }

    public JTextField getTfCodFunc() {
        return tfCodFunc;
    }

    public JTextField getTfCodPF() {
        return tfCodPF;
    }

    public JTextField getTfCodPJ() {
        return tfCodPJ;
    }

    public JTextField getTfcampoFun() {
        return tfcampoFun;
    }

    public JTextField getTfcampoPf() {
        return tfcampoPf;
    }

    public JTextField getTfcampoPj() {
        return tfcampoPj;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelCad = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        cbPotencialPf = new javax.swing.JCheckBox();
        jScrollPane6 = new javax.swing.JScrollPane();
        mostraPF = new javax.swing.JTable();
        tfCodPF = new javax.swing.JTextField();
        bPesquisarPF = new javax.swing.JButton();
        excluirPf = new javax.swing.JButton();
        tfcampoPf = new javax.swing.JTextField();
        alterarPf = new javax.swing.JButton();
        cbAlterarPf = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        cbPotencialPj = new javax.swing.JCheckBox();
        jScrollPane7 = new javax.swing.JScrollPane();
        mostraPJ = new javax.swing.JTable();
        tfCodPJ = new javax.swing.JTextField();
        bPesquisarPJ = new javax.swing.JButton();
        excluirPj = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cbAlterarPj = new javax.swing.JComboBox();
        tfcampoPj = new javax.swing.JTextField();
        alterarPj = new javax.swing.JButton();
        cadFunc = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        pesquisarFunc = new javax.swing.JButton();
        tfCodFunc = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        mostraFunc = new javax.swing.JTable();
        excluirFunc = new javax.swing.JButton();
        alterarFun = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cbAlterarFun = new javax.swing.JComboBox();
        tfcampoFun = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Cadastros");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel3.setPreferredSize(new java.awt.Dimension(600, 400));

        jLabel15.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel15.setText("Cód. Cliente:");

        jLabel16.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel16.setText("Alterar:");

        jLabel17.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel17.setText("Cliente Potencial");

        mostraPF.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód. Cliente", "Cód. ClientePF", "Nome", "CPF", "Estado Civil", "Sexo", "Data Nasc.", "Telefone", "Celular", "Email", "CEP", "UF", "Cidade", "Bairro", "Rua", "nº"
            }
        ));
        jScrollPane6.setViewportView(mostraPF);

        tfCodPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCodPFActionPerformed(evt);
            }
        });

        bPesquisarPF.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        bPesquisarPF.setText("Pesquisar");
        bPesquisarPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPesquisarPFActionPerformed(evt);
            }
        });

        excluirPf.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        excluirPf.setText("Excluir Cliente");
        excluirPf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirPfActionPerformed(evt);
            }
        });

        tfcampoPf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfcampoPfActionPerformed(evt);
            }
        });

        alterarPf.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        alterarPf.setText("Concluir");
        alterarPf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarPfActionPerformed(evt);
            }
        });

        cbAlterarPf.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        cbAlterarPf.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nome", "CPF", "Estado Civil", "Sexo", "Data Nasc.", "Telefone", "Celular", "Email", "CEP", "UF", "Cidade", "Bairro", "Rua", "Nº" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel15))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(tfCodPF, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(cbAlterarPf, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bPesquisarPF)
                            .addComponent(tfcampoPf, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(alterarPf)
                            .addComponent(excluirPf)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbPotencialPf)))
                .addContainerGap(429, Short.MAX_VALUE))
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1039, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(tfCodPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bPesquisarPF)
                    .addComponent(excluirPf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(alterarPf)
                    .addComponent(cbAlterarPf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfcampoPf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(cbPotencialPf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        painelCad.addTab("Pessoa Física", jPanel3);

        jPanel8.setPreferredSize(new java.awt.Dimension(600, 400));

        jLabel18.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel18.setText("Cód. Cliente:");

        jLabel20.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel20.setText("Cliente Potencial");

        mostraPJ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód. Cliente", "Cód. PJ", "Nome", "CNPJ", "Tipo Org.", "Telefone", "Celular", "Email", "CEP", "UF", "Cidade", "Bairro", "Rua", "Nº"
            }
        ));
        jScrollPane7.setViewportView(mostraPJ);

        tfCodPJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCodPJActionPerformed(evt);
            }
        });

        bPesquisarPJ.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        bPesquisarPJ.setText("Pesquisar");
        bPesquisarPJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPesquisarPJActionPerformed(evt);
            }
        });

        excluirPj.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        excluirPj.setText("Excluir Cliente");
        excluirPj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirPjActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel2.setText("Alterar:");

        cbAlterarPj.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nome", "CNPJ", "Tipo Org.", "Telefone", "Celular", "Email", "CEP", "UF", "Cidade", "Bairro", "Rua", "Nº" }));

        alterarPj.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        alterarPj.setText("Concluir");
        alterarPj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarPjActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbPotencialPj))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfCodPJ, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                            .addComponent(cbAlterarPj, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bPesquisarPJ)
                            .addComponent(tfcampoPj, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(excluirPj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(alterarPj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(tfCodPJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bPesquisarPJ)
                    .addComponent(excluirPj))
                .addGap(3, 3, 3)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAlterarPj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(tfcampoPj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alterarPj))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(cbPotencialPj))
                .addGap(47, 47, 47)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 1024, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                .addContainerGap())
        );

        painelCad.addTab("Pessoa Jurídica", jPanel4);

        cadFunc.setEnabled(false);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel5.setText("Cód. Funcionário:");

        pesquisarFunc.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        pesquisarFunc.setText("Pesquisar");
        pesquisarFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarFuncActionPerformed(evt);
            }
        });

        mostraFunc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód. Func", "Nome", "CPF", "Cargo Entrada", "Cargo Atual", "Setor", "Base Salarial", "Rua", "CEP", "Bairro", "Nº", "Cidade", "UF", "Data Admissão"
            }
        ));
        jScrollPane2.setViewportView(mostraFunc);

        excluirFunc.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        excluirFunc.setText("Excluir Funcionário");
        excluirFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirFuncActionPerformed(evt);
            }
        });

        alterarFun.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        alterarFun.setText("Concluir");
        alterarFun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarFunActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel1.setText("Alterar:");

        cbAlterarFun.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nome", "CPF", "Cargo Entrada", "Cargo Atual", "Setor", "Base Salarial", "Rua", "CEP", "Bairro", "Nº", "Cidade", "UF", "Data Admissão" }));

        javax.swing.GroupLayout cadFuncLayout = new javax.swing.GroupLayout(cadFunc);
        cadFunc.setLayout(cadFuncLayout);
        cadFuncLayout.setHorizontalGroup(
            cadFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1039, Short.MAX_VALUE)
            .addGroup(cadFuncLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cadFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(cadFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbAlterarFun, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfCodFunc, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cadFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfcampoFun, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pesquisarFunc))
                .addGap(18, 18, 18)
                .addGroup(cadFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(excluirFunc)
                    .addComponent(alterarFun))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cadFuncLayout.setVerticalGroup(
            cadFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cadFuncLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(cadFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(pesquisarFunc)
                    .addComponent(tfCodFunc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(excluirFunc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cadFuncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAlterarFun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(tfcampoFun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alterarFun))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        painelCad.addTab("Funcionários", cadFunc);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelCad, javax.swing.GroupLayout.PREFERRED_SIZE, 1044, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(painelCad)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bPesquisarPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPesquisarPFActionPerformed
        PessoaFisica pf = new PessoaFisica();
        codPf = tfCodPF.getText();
        ResultSet resultadoPf;
        resultadoPf = pf.retornarPf(codPf);
        if (cbPotencialPf.isSelected()) {
            resultadoPf = pf.retornarPotencialPf();
        }
        DefaultTableModel modelo;
        modelo = (DefaultTableModel) mostraPF.getModel();
        mostraPF.setAutoCreateRowSorter(true);
        ((DefaultTableModel) mostraPF.getModel()).setRowCount(0);

        try {

            while (resultadoPf.next()) {

                String codCliente = resultadoPf.getString("CODCLIENTE");
                String codigoPf = resultadoPf.getString("CODPF");
                String nome = resultadoPf.getString("NOME");
                String cpf = resultadoPf.getString("CPF");
                String estadoCivil = resultadoPf.getString("ESTADOCIVIL");
                String sexo = resultadoPf.getString("SEXO");
                // DATANASCIMENTO FORMATADA 
                String dia = resultadoPf.getString("DATANASCIMENTO").substring(8, 10);
                String mes = resultadoPf.getString("DATANASCIMENTO").substring(5, 7);
                String ano = resultadoPf.getString("DATANASCIMENTO").substring(0, 4);
                String dataNascimento = (dia + "/" + mes + "/" + ano);
                String telefone = resultadoPf.getString("TELEFONE");
                String celular = resultadoPf.getString("CELULAR");
                String cep = resultadoPf.getString("CEP");
                String bairro = resultadoPf.getString("BAIRRO");
                String rua = resultadoPf.getString("RUA");
                String uf = resultadoPf.getString("UF");
                String cidade = resultadoPf.getString("CIDADE");
                String numeroEndereco = resultadoPf.getString("NUMEROENDERECO");
                String email = resultadoPf.getString("EMAIL");

                modelo.addRow(new String[]{codCliente, codigoPf, nome, cpf, estadoCivil, sexo, dataNascimento, telefone, celular, email, cep, uf, cidade, bairro, rua, numeroEndereco});

            }

            pf.fechaConexao();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_bPesquisarPFActionPerformed

    private void excluirPfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirPfActionPerformed
        PessoaFisica pf = new PessoaFisica();
        codPf = tfCodPF.getText();
        pf.excluirPf(codPf);

    }//GEN-LAST:event_excluirPfActionPerformed

    private void tfcampoPfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfcampoPfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfcampoPfActionPerformed

    private void tfCodPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCodPFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCodPFActionPerformed

    private void tfCodPJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCodPJActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCodPJActionPerformed

    private void bPesquisarPJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPesquisarPJActionPerformed
        PessoaJuridica pj = new PessoaJuridica();
        codPj = tfCodPJ.getText();
        ResultSet resultadoPj;
        resultadoPj = pj.retornarPj(codPj);
        if (cbPotencialPj.isSelected()) {
            resultadoPj = pj.retornarPotencialPj();
        }
        DefaultTableModel modelo2;
        modelo2 = (DefaultTableModel) mostraPJ.getModel();
        mostraPJ.setAutoCreateRowSorter(true);
        ((DefaultTableModel) mostraPJ.getModel()).setRowCount(0);

        try {

            while (resultadoPj.next()) {

                String codCliente = resultadoPj.getString("CODCLIENTE");
                String codigoPj = resultadoPj.getString("CODPJ");
                String nome = resultadoPj.getString("NOME");
                String cnpj = resultadoPj.getString("CNPJ");
                String tipoOrg = resultadoPj.getString("TIPOORGANIZACAO");
                String telefone = resultadoPj.getString("TELEFONE");
                String celular = resultadoPj.getString("CELULAR");
                String cep = resultadoPj.getString("CEP");
                String bairro = resultadoPj.getString("BAIRRO");
                String rua = resultadoPj.getString("RUA");
                String uf = resultadoPj.getString("UF");
                String cidade = resultadoPj.getString("CIDADE");
                String numeroEndereco = resultadoPj.getString("NUMEROENDERECO");
                String email = resultadoPj.getString("EMAIL");

                modelo2.addRow(new String[]{codCliente, codigoPj, nome, cnpj, tipoOrg, telefone, celular, email, cep, uf, cidade, bairro, rua, numeroEndereco});

            }

            pj.fechaConexao();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bPesquisarPJActionPerformed

    private void alterarPfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarPfActionPerformed
        PessoaFisica pf = new PessoaFisica();
        codPf = tfCodPF.getText();
        campoSelecionado = String.valueOf(cbAlterarPf.getSelectedItem());
        if (tfcampoPf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "O campo de alteração está vazio!");

            return;
        }
        if (campoSelecionado == "Nome") {
            pf.setNome(tfcampoPf.getText());
            pf.alterarPf("Cliente", codPf, campoSelecionado, pf.getNome());
        } else if (campoSelecionado == "CPF") {
            pf.setCpf(tfcampoPf.getText());
            pf.alterarPf("PF", codPf, campoSelecionado, pf.getCpf());
        } else if (campoSelecionado == "Estado Civil") {
            campoSelecionado = "ESTADOCIVIL";
            pf.setEstadoCivil(tfcampoPf.getText());
            pf.alterarPf("PF", codPf, campoSelecionado, pf.getEstadoCivil());
        } else if (campoSelecionado == "Sexo") {
            campoSelecionado = "SEXO";
            pf.setSexo(tfcampoPf.getText().charAt(0));
            pf.alterarPf("PF", codPf, campoSelecionado, String.valueOf(pf.getSexo()));
        } else if (campoSelecionado == "Data Nasc.") {
            campoSelecionado = "DATANASCIMENTO";
            pf.setDataNascimento(tfcampoPf.getText());
            pf.alterarPf("PF", codPf, campoSelecionado, pf.getDataNascimento());
        } else if (campoSelecionado == "Telefone") {
            campoSelecionado = "TELEFONE";
            pf.setTelefone(tfcampoPf.getText());
            pf.alterarPf("CLIENTE", codPf, campoSelecionado, pf.getTelefone());
        } else if (campoSelecionado == "Celular") {
            campoSelecionado = "CELULAR";
            pf.setCelular(tfcampoPf.getText());
            pf.alterarPf("CLIENTE", codPf, campoSelecionado, pf.getCelular());
        } else if (campoSelecionado == "Email") {
            campoSelecionado = "EMAIL";
            pf.setEmail(tfcampoPf.getText());
            pf.alterarPf("CLIENTE", codPf, campoSelecionado, pf.getEmail());
        } else if (campoSelecionado == "CEP") {
            campoSelecionado = "CEP";
            pf.setCep(tfcampoPf.getText());
            pf.alterarPf("CLIENTE", codPf, campoSelecionado, pf.getCep());
        } else if (campoSelecionado == "UF") {
            campoSelecionado = "UF";
            pf.setUf(tfcampoPf.getText().substring(0, 2));
            pf.alterarPf("CLIENTE", codPf, campoSelecionado, pf.getUf());
        } else if (campoSelecionado == "Cidade") {
            campoSelecionado = "CIDADE";
            pf.setCidade(tfcampoPf.getText());
            pf.alterarPf("CLIENTE", codPf, campoSelecionado, pf.getCidade());
        } else if (campoSelecionado == "Bairro") {
            campoSelecionado = "BAIRRO";
            pf.setBairro(tfcampoPf.getText());
            pf.alterarPf("CLIENTE", codPf, campoSelecionado, pf.getBairro());
        } else if (campoSelecionado == "Rua") {
            campoSelecionado = "RUA";
            pf.setRua(tfcampoPf.getText());
            pf.alterarPf("CLIENTE", codPf, campoSelecionado, pf.getRua());
        } else if (campoSelecionado == "Nº") {
            campoSelecionado = "NUMEROENDERECO";
            pf.setNumero(tfcampoPf.getText());
            pf.alterarPf("CLIENTE", codPf, campoSelecionado, pf.getNumero());
        }
    }//GEN-LAST:event_alterarPfActionPerformed

    private void excluirPjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirPjActionPerformed
        PessoaJuridica pj = new PessoaJuridica();
        codPj = tfCodPJ.getText();
        pj.excluirPj(codPj);
    }//GEN-LAST:event_excluirPjActionPerformed

    private void pesquisarFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarFuncActionPerformed

        Funcionario func = new Funcionario();
        codFunc = tfCodFunc.getText();
        if (codFunc == null) {
            codFunc = "";
        }
        ResultSet resultadoFunc = func.retornarFunc(codFunc);
        DefaultTableModel modelo3;
        modelo3 = (DefaultTableModel) mostraFunc.getModel();
        mostraFunc.setAutoCreateRowSorter(true);
        ((DefaultTableModel) mostraFunc.getModel()).setRowCount(0);

        try {

            while (resultadoFunc.next()) {

                String codFunc = resultadoFunc.getString("CODFUNC");
                String nome = resultadoFunc.getString("NOME");
                String cpfFunc = resultadoFunc.getString("CPFFUN");
                String cargoEntrada = resultadoFunc.getString("CARGOENTRADA");
                String cargoAtual = resultadoFunc.getString("CARGOATUAL");
                String setor = resultadoFunc.getString("SETOR");
                String baseSalarialBanco = resultadoFunc.getString("BASESALARIAL");
                String baseSalarial = "R$ " + baseSalarialBanco;
                // DATANAADMISSAO FORMATADA 
                String dia = resultadoFunc.getString("DATAADMISSAO").substring(8, 10);
                String mes = resultadoFunc.getString("DATAADMISSAO").substring(5, 7);
                String ano = resultadoFunc.getString("DATAADMISSAO").substring(0, 4);
                String dataAdmissao = (dia + "/" + mes + "/" + ano);
                String cep = resultadoFunc.getString("CEP");
                String bairro = resultadoFunc.getString("BAIRRO");
                String rua = resultadoFunc.getString("RUA");
                String uf = resultadoFunc.getString("UF");
                String cidade = resultadoFunc.getString("CIDADE");
                String numeroEndereco = resultadoFunc.getString("NUMERO");

                modelo3.addRow(new String[]{codFunc, nome, cpfFunc, cargoEntrada, cargoAtual, setor, baseSalarial, rua, cep, bairro, numeroEndereco, cidade, uf, dataAdmissao});

            }

            func.fechaConexao();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_pesquisarFuncActionPerformed

    private void excluirFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirFuncActionPerformed
        Funcionario func = new Funcionario();
        String codFunc = tfCodFunc.getText();
        func.excluirFunc(codFunc);
    }//GEN-LAST:event_excluirFuncActionPerformed

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated

    }//GEN-LAST:event_formInternalFrameActivated

    private void alterarFunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarFunActionPerformed
        Funcionario func = new Funcionario();
        codFunc = tfCodFunc.getText();
        campoSelecionado = String.valueOf(cbAlterarFun.getSelectedItem());
        if (tfcampoFun.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "O campo de alteração está vazio!");

            return;
        }
        if (campoSelecionado == "Nome") {
            func.setNome(tfcampoFun.getText());
            func.alterarFunc(codFunc, campoSelecionado, func.getNome());
        } else if (campoSelecionado == "CPF") {
            func.setCpf(tfcampoFun.getText());
            func.alterarFunc(codFunc, "CPFFUN", func.getCpf());
        } else if (campoSelecionado == "Cargo Entrada") {
            func.setCargoEntrada(tfcampoFun.getText());
            func.alterarFunc(codFunc, "CARGOENTRADA", func.getCargoEntrada());
        } else if (campoSelecionado == "Cargo Atual") {
            func.setCargoAtual(tfcampoFun.getText());
            func.alterarFunc(codFunc, "CARGOATUAL", func.getCargoAtual());
        } else if (campoSelecionado == "Setor") {
            func.setSetor(tfcampoFun.getText());
            func.alterarFunc(codFunc, campoSelecionado, func.getSetor());
        } else if (campoSelecionado == "Base Salarial") {
            func.setBaseSalarial(Integer.parseInt(tfcampoFun.getText()));
            func.alterarFunc(codFunc, "BASESALARIAL", String.valueOf(func.getBaseSalarial()));
        } else if (campoSelecionado == "Rua") {
            func.setRua(tfcampoFun.getText());
            func.alterarFunc(codFunc, campoSelecionado, func.getRua());
        } else if (campoSelecionado == "CEP") {
            func.setCep(tfcampoFun.getText());
            func.alterarFunc(codFunc, campoSelecionado, func.getCep());
        } else if (campoSelecionado == "Bairro") {
            func.setBairro(tfcampoFun.getText());
            func.alterarFunc(codFunc, campoSelecionado, func.getBairro());
        } else if (campoSelecionado == "Nº") {
            func.setNumero(tfcampoFun.getText());
            func.alterarFunc(codFunc, "NUMERO", func.getNumero());
        } else if (campoSelecionado == "Cidade") {
            func.setCidade(tfcampoFun.getText());
            func.alterarFunc(codFunc, campoSelecionado, func.getCidade());
        } else if (campoSelecionado == "UF") {
            func.setUf(tfcampoFun.getText().substring(0, 2));
            func.alterarFunc(codFunc, campoSelecionado, func.getUf());
        } else if (campoSelecionado == "Data Admissão") {
            func.setDataAdmissao(tfcampoFun.getText());
            func.alterarFunc(codFunc, "DATAADMISSAO", func.getDataAdmissao());
        }


    }//GEN-LAST:event_alterarFunActionPerformed

    private void alterarPjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarPjActionPerformed
        PessoaJuridica pj = new PessoaJuridica();
        codPj = tfCodPJ.getText();
        campoSelecionado = String.valueOf(cbAlterarPj.getSelectedItem());
        if (tfcampoPj.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "O campo de alteração está vazio!");

            return;
        }
        if (campoSelecionado == "Nome") {
            pj.setNome(tfcampoPj.getText());
            pj.alterarPj("Cliente", codPj, campoSelecionado, pj.getNome());
        } else if (campoSelecionado == "CNPJ") {
            pj.setCnpj(tfcampoPj.getText());
            pj.alterarPj("PJ", codPj, campoSelecionado, pj.getCnpj());
        } else if (campoSelecionado == "Tipo Org.") {
            pj.setTipoOrg(tfcampoPj.getText());
            pj.alterarPj("PJ", codPj, "TIPOORGANIZACAO", pj.getTipoOrg());
        } else if (campoSelecionado == "Telefone") {
            pj.setTelefone(tfcampoPj.getText());
            pj.alterarPj("CLIENTE", codPj, campoSelecionado, pj.getTelefone());
        } else if (campoSelecionado == "Celular") {
            pj.setCelular(tfcampoPj.getText());
            pj.alterarPj("CLIENTE", codPj, campoSelecionado, pj.getCelular());
        } else if (campoSelecionado == "Email") {
            pj.setEmail(tfcampoPj.getText());
            pj.alterarPj("CLIENTE", codPj, campoSelecionado, pj.getEmail());
        } else if (campoSelecionado == "CEP") {
            pj.setCep(tfcampoPj.getText());
            pj.alterarPj("CLIENTE", codPj, campoSelecionado, pj.getCep());
        } else if (campoSelecionado == "UF") {
            pj.setUf(tfcampoPj.getText().substring(0, 2));
            pj.alterarPj("CLIENTE", codPj, campoSelecionado, pj.getUf());
        } else if (campoSelecionado == "Cidade") {
            pj.setCidade(tfcampoPj.getText());
            pj.alterarPj("CLIENTE", codPj, campoSelecionado, pj.getCidade());
        } else if (campoSelecionado == "Bairro") {
            pj.setBairro(tfcampoPj.getText());
            pj.alterarPj("CLIENTE", codPj, campoSelecionado, pj.getBairro());
        } else if (campoSelecionado == "Rua") {
            pj.setRua(tfcampoPj.getText());
            pj.alterarPj("CLIENTE", codPj, campoSelecionado, pj.getRua());
        } else if (campoSelecionado == "Nº") {
            pj.setNumero(tfcampoPj.getText());
            pj.alterarPj("CLIENTE", codPj, "NUMEROENDERECO", pj.getNumero());
        }
    }//GEN-LAST:event_alterarPjActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alterarFun;
    private javax.swing.JButton alterarPf;
    private javax.swing.JButton alterarPj;
    private javax.swing.JButton bPesquisarPF;
    private javax.swing.JButton bPesquisarPJ;
    private javax.swing.JPanel cadFunc;
    private javax.swing.JComboBox cbAlterarFun;
    private javax.swing.JComboBox cbAlterarPf;
    private javax.swing.JComboBox cbAlterarPj;
    private javax.swing.JCheckBox cbPotencialPf;
    private javax.swing.JCheckBox cbPotencialPj;
    private javax.swing.JButton excluirFunc;
    private javax.swing.JButton excluirPf;
    private javax.swing.JButton excluirPj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable mostraFunc;
    private javax.swing.JTable mostraPF;
    private javax.swing.JTable mostraPJ;
    private javax.swing.JTabbedPane painelCad;
    private javax.swing.JButton pesquisarFunc;
    private javax.swing.JTextField tfCodFunc;
    private javax.swing.JTextField tfCodPF;
    private javax.swing.JTextField tfCodPJ;
    private javax.swing.JTextField tfcampoFun;
    private javax.swing.JTextField tfcampoPf;
    private javax.swing.JTextField tfcampoPj;
    // End of variables declaration//GEN-END:variables
}
